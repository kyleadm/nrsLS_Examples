#include "svv.hpp"

#ifdef __okl__

#include "sine.oudf"

#endif


void userq(double time)
{
}

void uservp(double time)
{
  auto mesh = nrs->mesh;
  auto cds = nrs->cds;

}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
#if 0
  {
    auto props = kernelInfo;
    props.define("p_sigma_k") = 0.6;
    RANSktau::buildKernel(props);
  }
#endif
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
}

void UDF_Setup()
{
  nrs->userProperties = &uservp;
  nrs->userScalarSource = &userq;

  auto mesh = nrs->mesh;

  std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
  std::vector<dfloat> s0(mesh->Nlocal, 0.0);

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    auto cds = nrs->cds;
    for(int n = 0; n < mesh->Nlocal; n++) {
      U[n + 0 * nrs->fieldOffset] = 1;
      U[n + 1 * nrs->fieldOffset] = 0;
      U[n + 2 * nrs->fieldOffset] = 0;
      s0[n] = 1.0;
    }
    nrs->o_U.copyFrom(U.data(), U.size());
    nrs->cds->o_S.copyFrom(s0.data(), s0.size(), cds->fieldOffsetScan[0]); 
  }

  RANSktau::setup(ktauFieldStart);
}

void UDF_ExecuteStep(double time, int tstep)
{
  if (nrs->checkpointStep) {
  }
}
